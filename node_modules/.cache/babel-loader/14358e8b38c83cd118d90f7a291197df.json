{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParallaxMover = void 0;\n\nconst Utils_1 = require(\"../../Utils/Utils\");\n\nclass ParallaxMover {\n  init() {}\n\n  isEnabled(particle) {\n    return !(0, Utils_1.isSsr)() && !particle.destroyed && particle.container.actualOptions.interactivity.events.onHover.parallax.enable;\n  }\n\n  move(particle) {\n    const container = particle.container,\n          options = container.actualOptions;\n\n    if ((0, Utils_1.isSsr)() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const parallaxForce = options.interactivity.events.onHover.parallax.force,\n          mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    },\n          parallaxSmooth = options.interactivity.events.onHover.parallax.smooth,\n          factor = particle.getRadius() / parallaxForce,\n          centerDistance = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (centerDistance.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (centerDistance.y - particle.offset.y) / parallaxSmooth;\n  }\n\n}\n\nexports.ParallaxMover = ParallaxMover;","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/project/laptop-design-master/my-app/node_modules/tsparticles/cjs/Movers/Parallax/ParallaxMover.js"],"names":["Object","defineProperty","exports","value","ParallaxMover","Utils_1","require","init","isEnabled","particle","isSsr","destroyed","container","actualOptions","interactivity","events","onHover","parallax","enable","move","options","parallaxForce","force","mousePos","mouse","position","canvasCenter","x","canvas","size","width","y","height","parallaxSmooth","smooth","factor","getRadius","centerDistance","offset"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMF,aAAN,CAAoB;AAChBG,EAAAA,IAAI,GAAG,CACN;;AACDC,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,WAAQ,CAAC,CAAC,GAAGJ,OAAO,CAACK,KAAZ,GAAD,IACJ,CAACD,QAAQ,CAACE,SADN,IAEJF,QAAQ,CAACG,SAAT,CAAmBC,aAAnB,CAAiCC,aAAjC,CAA+CC,MAA/C,CAAsDC,OAAtD,CAA8DC,QAA9D,CAAuEC,MAF3E;AAGH;;AACDC,EAAAA,IAAI,CAACV,QAAD,EAAW;AACX,UAAMG,SAAS,GAAGH,QAAQ,CAACG,SAA3B;AAAA,UAAsCQ,OAAO,GAAGR,SAAS,CAACC,aAA1D;;AACA,QAAI,CAAC,GAAGR,OAAO,CAACK,KAAZ,OAAwB,CAACU,OAAO,CAACN,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CC,MAA3E,EAAmF;AAC/E;AACH;;AACD,UAAMG,aAAa,GAAGD,OAAO,CAACN,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CK,KAApE;AAAA,UAA2EC,QAAQ,GAAGX,SAAS,CAACE,aAAV,CAAwBU,KAAxB,CAA8BC,QAApH;;AACA,QAAI,CAACF,QAAL,EAAe;AACX;AACH;;AACD,UAAMG,YAAY,GAAG;AACjBC,MAAAA,CAAC,EAAEf,SAAS,CAACgB,MAAV,CAAiBC,IAAjB,CAAsBC,KAAtB,GAA8B,CADhB;AAEjBC,MAAAA,CAAC,EAAEnB,SAAS,CAACgB,MAAV,CAAiBC,IAAjB,CAAsBG,MAAtB,GAA+B;AAFjB,KAArB;AAAA,UAGGC,cAAc,GAAGb,OAAO,CAACN,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CiB,MAHlE;AAAA,UAG0EC,MAAM,GAAG1B,QAAQ,CAAC2B,SAAT,KAAuBf,aAH1G;AAAA,UAGyHgB,cAAc,GAAG;AACtIV,MAAAA,CAAC,EAAE,CAACJ,QAAQ,CAACI,CAAT,GAAaD,YAAY,CAACC,CAA3B,IAAgCQ,MADmG;AAEtIJ,MAAAA,CAAC,EAAE,CAACR,QAAQ,CAACQ,CAAT,GAAaL,YAAY,CAACK,CAA3B,IAAgCI;AAFmG,KAH1I;AAOA1B,IAAAA,QAAQ,CAAC6B,MAAT,CAAgBX,CAAhB,IAAqB,CAACU,cAAc,CAACV,CAAf,GAAmBlB,QAAQ,CAAC6B,MAAT,CAAgBX,CAApC,IAAyCM,cAA9D;AACAxB,IAAAA,QAAQ,CAAC6B,MAAT,CAAgBP,CAAhB,IAAqB,CAACM,cAAc,CAACN,CAAf,GAAmBtB,QAAQ,CAAC6B,MAAT,CAAgBP,CAApC,IAAyCE,cAA9D;AACH;;AA1Be;;AA4BpB/B,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParallaxMover = void 0;\nconst Utils_1 = require(\"../../Utils/Utils\");\nclass ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!(0, Utils_1.isSsr)() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions;\n        if ((0, Utils_1.isSsr)() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        }, parallaxSmooth = options.interactivity.events.onHover.parallax.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (centerDistance.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (centerDistance.y - particle.offset.y) / parallaxSmooth;\n    }\n}\nexports.ParallaxMover = ParallaxMover;\n"]},"metadata":{},"sourceType":"script"}