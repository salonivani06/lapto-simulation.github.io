{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuadTree = void 0;\n\nvar Circle_1 = require(\"./Circle\");\n\nvar CircleWarp_1 = require(\"./CircleWarp\");\n\nvar Rectangle_1 = require(\"./Rectangle\");\n\nvar NumberUtils_1 = require(\"../../Utils/NumberUtils\");\n\nvar QuadTree = /*#__PURE__*/function () {\n  function QuadTree(rectangle, capacity) {\n    _classCallCheck(this, QuadTree);\n\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n  }\n\n  _createClass(QuadTree, [{\n    key: \"insert\",\n    value: function insert(point) {\n      var _a, _b, _c, _d, _e;\n\n      if (!this.rectangle.contains(point.position)) {\n        return false;\n      }\n\n      if (this.points.length < this.capacity) {\n        this.points.push(point);\n        return true;\n      }\n\n      if (!this.divided) {\n        this.subdivide();\n      }\n\n      return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n    }\n  }, {\n    key: \"queryCircle\",\n    value: function queryCircle(position, radius) {\n      return this.query(new Circle_1.Circle(position.x, position.y, radius));\n    }\n  }, {\n    key: \"queryCircleWarp\",\n    value: function queryCircleWarp(position, radius, containerOrSize) {\n      var container = containerOrSize,\n          size = containerOrSize;\n      return this.query(new CircleWarp_1.CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size));\n    }\n  }, {\n    key: \"queryRectangle\",\n    value: function queryRectangle(position, size) {\n      return this.query(new Rectangle_1.Rectangle(position.x, position.y, size.width, size.height));\n    }\n  }, {\n    key: \"query\",\n    value: function query(range, found) {\n      var _a, _b, _c, _d;\n\n      var res = found !== null && found !== void 0 ? found : [];\n\n      if (!range.intersects(this.rectangle)) {\n        return [];\n      }\n\n      var _iterator = _createForOfIteratorHelper(this.points),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n\n          if (!range.contains(p.position) && (0, NumberUtils_1.getDistance)(range.position, p.position) > p.particle.getRadius()) {\n            continue;\n          }\n\n          res.push(p.particle);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.divided) {\n        (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);\n        (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);\n        (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);\n        (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"subdivide\",\n    value: function subdivide() {\n      var x = this.rectangle.position.x,\n          y = this.rectangle.position.y,\n          w = this.rectangle.size.width,\n          h = this.rectangle.size.height,\n          capacity = this.capacity;\n      this.northEast = new QuadTree(new Rectangle_1.Rectangle(x, y, w / 2, h / 2), capacity);\n      this.northWest = new QuadTree(new Rectangle_1.Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n      this.southEast = new QuadTree(new Rectangle_1.Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n      this.southWest = new QuadTree(new Rectangle_1.Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n      this.divided = true;\n    }\n  }]);\n\n  return QuadTree;\n}();\n\nexports.QuadTree = QuadTree;","map":{"version":3,"sources":["D:/projects/laptop-design-master/my-app/node_modules/tsparticles/cjs/Core/Utils/QuadTree.js"],"names":["Object","defineProperty","exports","value","QuadTree","Circle_1","require","CircleWarp_1","Rectangle_1","NumberUtils_1","rectangle","capacity","points","divided","point","_a","_b","_c","_d","_e","contains","position","length","push","subdivide","northEast","insert","northWest","southEast","southWest","radius","query","Circle","x","y","containerOrSize","container","size","CircleWarp","canvas","undefined","Rectangle","width","height","range","found","res","intersects","p","getDistance","particle","getRadius","w","h"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QuadTree = void 0;\nconst Circle_1 = require(\"./Circle\");\nconst CircleWarp_1 = require(\"./CircleWarp\");\nconst Rectangle_1 = require(\"./Rectangle\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nclass QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this.points = [];\n        this.divided = false;\n    }\n    insert(point) {\n        var _a, _b, _c, _d, _e;\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this.points.length < this.capacity) {\n            this.points.push(point);\n            return true;\n        }\n        if (!this.divided) {\n            this.subdivide();\n        }\n        return ((_e = (((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) ||\n            ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) ||\n            ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) ||\n            ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point)))) !== null && _e !== void 0 ? _e : false);\n    }\n    queryCircle(position, radius) {\n        return this.query(new Circle_1.Circle(position.x, position.y, radius));\n    }\n    queryCircleWarp(position, radius, containerOrSize) {\n        const container = containerOrSize, size = containerOrSize;\n        return this.query(new CircleWarp_1.CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size));\n    }\n    queryRectangle(position, size) {\n        return this.query(new Rectangle_1.Rectangle(position.x, position.y, size.width, size.height));\n    }\n    query(range, found) {\n        var _a, _b, _c, _d;\n        const res = found !== null && found !== void 0 ? found : [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this.points) {\n            if (!range.contains(p.position) && (0, NumberUtils_1.getDistance)(range.position, p.position) > p.particle.getRadius()) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this.divided) {\n            (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);\n            (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);\n            (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);\n            (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);\n        }\n        return res;\n    }\n    subdivide() {\n        const x = this.rectangle.position.x, y = this.rectangle.position.y, w = this.rectangle.size.width, h = this.rectangle.size.height, capacity = this.capacity;\n        this.northEast = new QuadTree(new Rectangle_1.Rectangle(x, y, w / 2, h / 2), capacity);\n        this.northWest = new QuadTree(new Rectangle_1.Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n        this.southEast = new QuadTree(new Rectangle_1.Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n        this.southWest = new QuadTree(new Rectangle_1.Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n        this.divided = true;\n    }\n}\nexports.QuadTree = QuadTree;\n"]},"metadata":{},"sourceType":"script"}