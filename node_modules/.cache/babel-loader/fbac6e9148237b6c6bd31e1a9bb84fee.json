{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Attractor = void 0;\n\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\n\nconst Circle_1 = require(\"../../../Core/Utils/Circle\");\n\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\n\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\n\nconst Vector_1 = require(\"../../../Core/Utils/Vector\");\n\nconst Utils_1 = require(\"../../../Utils/Utils\");\n\nclass Attractor extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions;\n\n      if (mode !== \"attract\") {\n        return;\n      }\n\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n\n      container.attract.clicking = true;\n      container.attract.count = 0;\n\n      for (const particle of container.attract.particles) {\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(() => {\n        if (!container.destroyed) {\n          if (!container.attract) {\n            container.attract = {\n              particles: []\n            };\n          }\n\n          container.attract.clicking = false;\n        }\n      }, options.interactivity.modes.attract.duration * 1000);\n    };\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events;\n\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n    return (0, Utils_1.isInArray)(\"attract\", hoverMode) || (0, Utils_1.isInArray)(\"attract\", clickMode);\n  }\n\n  reset() {}\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseMoveStatus = container.interactivity.status === Constants_1.Constants.mouseMoveEvent,\n          events = options.interactivity.events,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          clickEnabled = events.onClick.enable,\n          clickMode = events.onClick.mode;\n\n    if (mouseMoveStatus && hoverEnabled && (0, Utils_1.isInArray)(\"attract\", hoverMode)) {\n      this.hoverAttract();\n    } else if (clickEnabled && (0, Utils_1.isInArray)(\"attract\", clickMode)) {\n      this.clickAttract();\n    }\n  }\n\n  hoverAttract() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const attractRadius = container.retina.attractModeDistance;\n    this.processAttract(mousePos, attractRadius, new Circle_1.Circle(mousePos.x, mousePos.y, attractRadius));\n  }\n\n  processAttract(position, attractRadius, area) {\n    const container = this.container;\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    const query = container.particles.quadTree.query(area);\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = (0, NumberUtils_1.getDistances)(particle.position, position);\n      const velocity = attractOptions.speed * attractOptions.factor;\n      const attractFactor = (0, NumberUtils_1.clamp)((0, NumberUtils_1.calcEasing)(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n      const normVec = Vector_1.Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n      particle.position.subFrom(normVec);\n    }\n  }\n\n  clickAttract() {\n    const container = this.container;\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    if (!container.attract.finish) {\n      if (!container.attract.count) {\n        container.attract.count = 0;\n      }\n\n      container.attract.count++;\n\n      if (container.attract.count === container.particles.count) {\n        container.attract.finish = true;\n      }\n    }\n\n    if (container.attract.clicking) {\n      const mousePos = container.interactivity.mouse.clickPosition;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const attractRadius = container.retina.attractModeDistance;\n      this.processAttract(mousePos, attractRadius, new Circle_1.Circle(mousePos.x, mousePos.y, attractRadius));\n    } else if (container.attract.clicking === false) {\n      container.attract.particles = [];\n    }\n\n    return;\n  }\n\n}\n\nexports.Attractor = Attractor;","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/project/laptop-design-master/my-app/node_modules/tsparticles/cjs/Interactions/External/Attract/Attractor.js"],"names":["Object","defineProperty","exports","value","Attractor","NumberUtils_1","require","Circle_1","Constants_1","ExternalInteractorBase_1","Vector_1","Utils_1","ExternalInteractorBase","constructor","container","attract","particles","handleClickMode","mode","options","actualOptions","clicking","count","particle","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","interactivity","modes","duration","isEnabled","mouse","events","position","onHover","enable","clickPosition","onClick","hoverMode","clickMode","isInArray","reset","interact","mouseMoveStatus","status","Constants","mouseMoveEvent","hoverEnabled","clickEnabled","hoverAttract","clickAttract","mousePos","attractRadius","retina","attractModeDistance","processAttract","Circle","x","y","area","attractOptions","query","quadTree","dx","dy","distance","getDistances","speed","factor","attractFactor","clamp","calcEasing","easing","maxSpeed","normVec","Vector","create","subFrom"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Attractor = void 0;\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\nconst Circle_1 = require(\"../../../Core/Utils/Circle\");\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\nconst Vector_1 = require(\"../../../Core/Utils/Vector\");\nconst Utils_1 = require(\"../../../Utils/Utils\");\nclass Attractor extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions;\n            if (mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (!container.destroyed) {\n                    if (!container.attract) {\n                        container.attract = { particles: [] };\n                    }\n                    container.attract.clicking = false;\n                }\n            }, options.interactivity.modes.attract.duration * 1000);\n        };\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return (0, Utils_1.isInArray)(\"attract\", hoverMode) || (0, Utils_1.isInArray)(\"attract\", clickMode);\n    }\n    reset() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === Constants_1.Constants.mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && (0, Utils_1.isInArray)(\"attract\", hoverMode)) {\n            this.hoverAttract();\n        }\n        else if (clickEnabled && (0, Utils_1.isInArray)(\"attract\", clickMode)) {\n            this.clickAttract();\n        }\n    }\n    hoverAttract() {\n        const container = this.container;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const attractRadius = container.retina.attractModeDistance;\n        this.processAttract(mousePos, attractRadius, new Circle_1.Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n    processAttract(position, attractRadius, area) {\n        const container = this.container;\n        const attractOptions = container.actualOptions.interactivity.modes.attract;\n        const query = container.particles.quadTree.query(area);\n        for (const particle of query) {\n            const { dx, dy, distance } = (0, NumberUtils_1.getDistances)(particle.position, position);\n            const velocity = attractOptions.speed * attractOptions.factor;\n            const attractFactor = (0, NumberUtils_1.clamp)((0, NumberUtils_1.calcEasing)(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n            const normVec = Vector_1.Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n            particle.position.subFrom(normVec);\n        }\n    }\n    clickAttract() {\n        const container = this.container;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        if (!container.attract.finish) {\n            if (!container.attract.count) {\n                container.attract.count = 0;\n            }\n            container.attract.count++;\n            if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n            }\n        }\n        if (container.attract.clicking) {\n            const mousePos = container.interactivity.mouse.clickPosition;\n            if (!mousePos) {\n                return;\n            }\n            const attractRadius = container.retina.attractModeDistance;\n            this.processAttract(mousePos, attractRadius, new Circle_1.Circle(mousePos.x, mousePos.y, attractRadius));\n        }\n        else if (container.attract.clicking === false) {\n            container.attract.particles = [];\n        }\n        return;\n    }\n}\nexports.Attractor = Attractor;\n"]},"metadata":{},"sourceType":"script"}