{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collider = void 0;\n\nconst Utils_1 = require(\"../../../Utils/Utils\");\n\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\n\nconst ParticlesInteractorBase_1 = require(\"../../../Core/Utils/ParticlesInteractorBase\");\n\nfunction bounce(p1, p2) {\n  (0, Utils_1.circleBounce)((0, Utils_1.circleBounceDataFromParticle)(p1), (0, Utils_1.circleBounceDataFromParticle)(p2));\n}\n\nfunction destroy(p1, p2) {\n  if (!p1.unbreakable && !p2.unbreakable) {\n    bounce(p1, p2);\n  }\n\n  if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n    p1.destroy();\n  } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n    p2.destroy();\n  } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n    if (p1.getRadius() >= p2.getRadius()) {\n      p2.destroy();\n    } else {\n      p1.destroy();\n    }\n  }\n}\n\nclass Collider extends ParticlesInteractorBase_1.ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled(particle) {\n    return particle.options.collisions.enable;\n  }\n\n  reset() {}\n\n  async interact(p1) {\n    const container = this.container,\n          pos1 = p1.getPosition(),\n          radius1 = p1.getRadius(),\n          query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n\n    for (const p2 of query) {\n      if (p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning) {\n        continue;\n      }\n\n      const pos2 = p2.getPosition();\n\n      if (Math.round(pos1.z) !== Math.round(pos2.z)) {\n        continue;\n      }\n\n      const dist = (0, NumberUtils_1.getDistance)(pos1, pos2),\n            radius2 = p2.getRadius(),\n            distP = radius1 + radius2;\n\n      if (dist <= distP) {\n        this.resolveCollision(p1, p2);\n      }\n    }\n  }\n\n  resolveCollision(p1, p2) {\n    switch (p1.options.collisions.mode) {\n      case \"absorb\":\n        this.absorb(p1, p2);\n        break;\n\n      case \"bounce\":\n        bounce(p1, p2);\n        break;\n\n      case \"destroy\":\n        destroy(p1, p2);\n        break;\n    }\n  }\n\n  absorb(p1, p2) {\n    const container = this.container,\n          fps = container.fpsLimit / 1000;\n\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n      p1.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n      p2.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n      if (p1.getRadius() >= p2.getRadius()) {\n        const factor = (0, NumberUtils_1.clamp)(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;\n        p1.size.value += factor;\n        p2.size.value -= factor;\n\n        if (p2.getRadius() <= container.retina.pixelRatio) {\n          p2.size.value = 0;\n          p2.destroy();\n        }\n      } else {\n        const factor = (0, NumberUtils_1.clamp)(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;\n        p1.size.value -= factor;\n        p2.size.value += factor;\n\n        if (p1.getRadius() <= container.retina.pixelRatio) {\n          p1.size.value = 0;\n          p1.destroy();\n        }\n      }\n    }\n  }\n\n}\n\nexports.Collider = Collider;","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/project/laptop-design-master/my-app/node_modules/tsparticles/cjs/Interactions/Particles/Collisions/Collider.js"],"names":["Object","defineProperty","exports","value","Collider","Utils_1","require","NumberUtils_1","ParticlesInteractorBase_1","bounce","p1","p2","circleBounce","circleBounceDataFromParticle","destroy","unbreakable","getRadius","undefined","ParticlesInteractorBase","constructor","container","isEnabled","particle","options","collisions","enable","reset","interact","pos1","getPosition","radius1","query","particles","quadTree","queryCircle","mode","destroyed","spawning","pos2","Math","round","z","dist","getDistance","radius2","distP","resolveCollision","absorb","fps","fpsLimit","factor","clamp","size","retina","pixelRatio"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collider = void 0;\nconst Utils_1 = require(\"../../../Utils/Utils\");\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\nconst ParticlesInteractorBase_1 = require(\"../../../Core/Utils/ParticlesInteractorBase\");\nfunction bounce(p1, p2) {\n    (0, Utils_1.circleBounce)((0, Utils_1.circleBounceDataFromParticle)(p1), (0, Utils_1.circleBounceDataFromParticle)(p2));\n}\nfunction destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        if (p1.getRadius() >= p2.getRadius()) {\n            p2.destroy();\n        }\n        else {\n            p1.destroy();\n        }\n    }\n}\nclass Collider extends ParticlesInteractorBase_1.ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n    async interact(p1) {\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (Math.round(pos1.z) !== Math.round(pos2.z)) {\n                continue;\n            }\n            const dist = (0, NumberUtils_1.getDistance)(pos1, pos2), radius2 = p2.getRadius(), distP = radius1 + radius2;\n            if (dist <= distP) {\n                this.resolveCollision(p1, p2);\n            }\n        }\n    }\n    resolveCollision(p1, p2) {\n        switch (p1.options.collisions.mode) {\n            case \"absorb\":\n                this.absorb(p1, p2);\n                break;\n            case \"bounce\":\n                bounce(p1, p2);\n                break;\n            case \"destroy\":\n                destroy(p1, p2);\n                break;\n        }\n    }\n    absorb(p1, p2) {\n        const container = this.container, fps = container.fpsLimit / 1000;\n        if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n            p1.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n            p2.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n            if (p1.getRadius() >= p2.getRadius()) {\n                const factor = (0, NumberUtils_1.clamp)(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;\n                p1.size.value += factor;\n                p2.size.value -= factor;\n                if (p2.getRadius() <= container.retina.pixelRatio) {\n                    p2.size.value = 0;\n                    p2.destroy();\n                }\n            }\n            else {\n                const factor = (0, NumberUtils_1.clamp)(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;\n                p1.size.value -= factor;\n                p2.size.value += factor;\n                if (p1.getRadius() <= container.retina.pixelRatio) {\n                    p1.size.value = 0;\n                    p1.destroy();\n                }\n            }\n        }\n    }\n}\nexports.Collider = Collider;\n"]},"metadata":{},"sourceType":"script"}