{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:\\\\projects\\\\laptop-design-master\\\\my-app\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _createForOfIteratorHelper = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _asyncToGenerator = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nvar ColorUtils_1 = require(\"../../../Utils/ColorUtils\");\n\nvar Constants_1 = require(\"../../../Core/Utils/Constants\");\n\nvar ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\n\nvar NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\n\nvar Utils_1 = require(\"../../../Utils/Utils\");\n\nvar Grabber = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Grabber, _ExternalInteractorBa);\n\n  var _super = _createSuper(Grabber);\n\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n      return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, container, options, interactivity, mousePos, distance, query, _iterator, _step, particle, pos, pointDistance, grabLineOptions, lineOpacity, opacityLine, optColor, linksOptions, colorLine;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n\n                if (!(!interactivity.events.onHover.enable || container.interactivity.status !== Constants_1.Constants.mouseMoveEvent)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                mousePos = container.interactivity.mouse.position;\n\n                if (mousePos) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n                _iterator = _createForOfIteratorHelper(query);\n                _context.prev = 8;\n\n                _iterator.s();\n\n              case 10:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 26;\n                  break;\n                }\n\n                particle = _step.value;\n                pos = particle.getPosition(), pointDistance = (0, NumberUtils_1.getDistance)(pos, mousePos);\n\n                if (!(pointDistance > distance)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 24);\n\n              case 15:\n                grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n                if (!(opacityLine <= 0)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 24);\n\n              case 18:\n                optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n                if (!container.particles.grabLineColor) {\n                  linksOptions = options.interactivity.modes.grab.links;\n                  container.particles.grabLineColor = (0, ColorUtils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n                }\n\n                colorLine = (0, ColorUtils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n\n                if (colorLine) {\n                  _context.next = 23;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 23:\n                container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n\n              case 24:\n                _context.next = 10;\n                break;\n\n              case 26:\n                _context.next = 31;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](8);\n\n                _iterator.e(_context.t0);\n\n              case 31:\n                _context.prev = 31;\n\n                _iterator.f();\n\n                return _context.finish(31);\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 28, 31, 34]]);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }]);\n\n  return Grabber;\n}(ExternalInteractorBase_1.ExternalInteractorBase);\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["D:/projects/laptop-design-master/my-app/node_modules/tsparticles/cjs/Interactions/External/Grab/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","ColorUtils_1","require","Constants_1","ExternalInteractorBase_1","NumberUtils_1","Utils_1","container","mouse","interactivity","events","actualOptions","onHover","enable","position","isInArray","mode","options","status","Constants","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","getDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","_a","color","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","colorLine","getLinkColor","undefined","canvas","drawGrabLine","ExternalInteractorBase"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst ColorUtils_1 = require(\"../../../Utils/ColorUtils\");\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\nconst Utils_1 = require(\"../../../Utils/Utils\");\nclass Grabber extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    async interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.events.onHover.enable || container.interactivity.status !== Constants_1.Constants.mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = (0, NumberUtils_1.getDistance)(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n            if (!container.particles.grabLineColor) {\n                const linksOptions = options.interactivity.modes.grab.links;\n                container.particles.grabLineColor = (0, ColorUtils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = (0, ColorUtils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                return;\n            }\n            container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}