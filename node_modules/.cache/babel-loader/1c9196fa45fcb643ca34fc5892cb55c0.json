{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RollUpdater = void 0;\n\nconst ColorUtils_1 = require(\"../../Utils/ColorUtils\");\n\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\n\nfunction updateRoll(particle, delta) {\n  const roll = particle.options.roll;\n\n  if (!particle.roll || !roll.enable) {\n    return;\n  }\n\n  const speed = particle.roll.speed * delta.factor;\n  const max = 2 * Math.PI;\n  particle.roll.angle += speed;\n\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\n\nclass RollUpdater {\n  init(particle) {\n    const rollOpt = particle.options.roll;\n\n    if (rollOpt.enable) {\n      particle.roll = {\n        angle: Math.random() * Math.PI * 2,\n        speed: (0, NumberUtils_1.getRangeValue)(rollOpt.speed) / 360\n      };\n\n      if (rollOpt.backColor) {\n        particle.backColor = (0, ColorUtils_1.colorToHsl)(rollOpt.backColor);\n      } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n          type: alterType,\n          value: (0, NumberUtils_1.getRangeValue)(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n        };\n      } else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n          type: \"darken\",\n          value: (0, NumberUtils_1.getRangeValue)(rollOpt.darken.value)\n        };\n      } else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n          type: \"enlighten\",\n          value: (0, NumberUtils_1.getRangeValue)(rollOpt.enlighten.value)\n        };\n      }\n    } else {\n      particle.roll = {\n        angle: 0,\n        speed: 0\n      };\n    }\n  }\n\n  isEnabled(particle) {\n    const roll = particle.options.roll;\n    return !particle.destroyed && !particle.spawning && roll.enable;\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateRoll(particle, delta);\n  }\n\n}\n\nexports.RollUpdater = RollUpdater;","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/project/laptop-design-master/my-app/node_modules/tsparticles/cjs/Updaters/Roll/RollUpdater.js"],"names":["Object","defineProperty","exports","value","RollUpdater","ColorUtils_1","require","NumberUtils_1","updateRoll","particle","delta","roll","options","enable","speed","factor","max","Math","PI","angle","init","rollOpt","random","getRangeValue","backColor","colorToHsl","darken","enlighten","alterType","alter","type","isEnabled","destroyed","spawning","update"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RollUpdater = void 0;\nconst ColorUtils_1 = require(\"../../Utils/ColorUtils\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !roll.enable) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor;\n    const max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nclass RollUpdater {\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt.enable) {\n            particle.roll = {\n                angle: Math.random() * Math.PI * 2,\n                speed: (0, NumberUtils_1.getRangeValue)(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = (0, ColorUtils_1.colorToHsl)(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: (0, NumberUtils_1.getRangeValue)(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: (0, NumberUtils_1.getRangeValue)(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: (0, NumberUtils_1.getRangeValue)(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = { angle: 0, speed: 0 };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && roll.enable;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\nexports.RollUpdater = RollUpdater;\n"]},"metadata":{},"sourceType":"script"}