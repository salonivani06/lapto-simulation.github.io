{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"D:\\\\projects\\\\laptop-design-master\\\\my-app\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nvar Utils_1 = require(\"./Utils\");\n\nvar Utils_2 = require(\"../../Utils/Utils\");\n\nvar NumberUtils_1 = require(\"../../Utils/NumberUtils\");\n\nvar Constants_1 = require(\"../../Core/Utils/Constants\");\n\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nvar PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.initRawData();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n\n      return initAsync;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n\n      var container = this.container,\n          options = this.options;\n\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.initRawData(true);\n\n              case 2:\n                _context2.next = 4;\n                return container.particles.redraw();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n\n      return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var options = this.options,\n          polygonDraw = options.draw;\n\n      if (!options.enable || !polygonDraw.enable) {\n        return;\n      }\n\n      var rawData = this.raw;\n\n      var _iterator = _createForOfIteratorHelper(this.paths),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d,\n              path2dSupported = this.path2DSupported;\n\n          if (!context) {\n            continue;\n          }\n\n          if (path2dSupported && path2d && this.offset) {\n            (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n              pj = this.raw[j];\n          closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n          var dist = (0, NumberUtils_1.getDistances)(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n\n          if (dist.distance < radius) {\n            (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n\n      var container = this.container,\n          options = this.options;\n\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n\n      if (!this.raw) {\n        throw new Error(Constants_1.Constants.noPolygonFound);\n      }\n\n      var canvasSize = container.canvas.size,\n          x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n          y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i],\n            pj = this.raw[j],\n            intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      var container = this.container,\n          options = this.options,\n          parser = new DOMParser(),\n          doc = parser.parseFromString(xml, \"image/svg+xml\"),\n          svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n\n      this.paths = [];\n\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n\n      var pxRatio = container.retina.pixelRatio,\n          scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.raw);\n\n              case 3:\n                _context3.next = 5;\n                return fetch(url);\n\n              case 5:\n                req = _context3.sent;\n\n                if (req.ok) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n              case 8:\n                _context3.t0 = this;\n                _context3.next = 11;\n                return req.text();\n\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container,\n          options = this.options;\n      var position;\n\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n\n      var coords = (0, Utils_2.itemFromArray)(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n\n      var options = this.options;\n\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n\n      var path = (0, Utils_2.itemFromArray)(this.paths),\n          distance = Math.floor(Math.random() * path.length) + 1,\n          point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      var options = this.container.actualOptions,\n          polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      var offset = 0,\n          point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0),\n          distance = totalLength / options.particles.number.value;\n\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n          _step4;\n\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n          if (pathData) {\n            var path2d = new Path2D(pathData),\n                matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n                finalPath = new Path2D(),\n                transform = matrix.scale(options.scale);\n\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n\n          path.path2d.closePath();\n        };\n\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n\n              case 7:\n                if (options.data) {\n                  data = options.data;\n\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n\n              case 8:\n                this.createPath2D();\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n\n      return initRawData;\n    }()\n  }]);\n\n  return PolygonMaskInstance;\n}();\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"sources":["D:/projects/laptop-design-master/my-app/node_modules/tsparticles/cjs/Plugins/PolygonMask/PolygonMaskInstance.js"],"names":["Object","defineProperty","exports","value","PolygonMaskInstance","Utils_1","require","Utils_2","NumberUtils_1","Constants_1","PolygonMask_1","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","load","polygon","polygonMaskOptions","enable","initRawData","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","paths","inline","arrangement","drawPoints","position","_a","_b","length","deepExtend","randomPoint","particle","delta","direction","polygonBounce","checkInsidePolygon","context","polygonDraw","draw","rawData","path","path2d","path2dSupported","offset","drawPolygonMaskPath","stroke","drawPolygonMask","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","calcClosestPtOnSegment","dist","getDistances","distance","segmentBounce","velocity","undefined","factor","x","y","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","parsePaths","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","downloadSvgPath","data","Array","map","t","join","namespaces","createPath2D"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Utils_2 = require(\"../../Utils/Utils\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nconst Constants_1 = require(\"../../Core/Utils/Constants\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n                const dist = (0, NumberUtils_1.getDistances)(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = (0, Utils_2.itemFromArray)(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const path = (0, Utils_2.itemFromArray)(this.paths), distance = Math.floor(Math.random() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"]},"metadata":{},"sourceType":"script"}