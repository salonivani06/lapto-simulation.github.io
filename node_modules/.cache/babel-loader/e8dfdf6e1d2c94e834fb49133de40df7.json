{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nconst CanvasUtils_1 = require(\"../Utils/CanvasUtils\");\n\nconst ColorUtils_1 = require(\"../Utils/ColorUtils\");\n\nconst Constants_1 = require(\"./Utils/Constants\");\n\nconst Utils_1 = require(\"../Utils/Utils\");\n\nclass Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    this.resize();\n    this.initStyle();\n    this.initCover();\n    this.initTrail();\n    this.initBackground();\n    this.paint();\n  }\n\n  loadCanvas(canvas) {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = canvas.dataset && Constants_1.Constants.generatedAttribute in canvas.dataset ? canvas.dataset[Constants_1.Constants.generatedAttribute] === \"true\" : this.generatedCanvas;\n    this.element = canvas;\n    this.originalStyle = (0, Utils_1.deepExtend)({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.draw(ctx => {\n      (0, CanvasUtils_1.clear)(ctx, this.size);\n    });\n  }\n\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        (0, CanvasUtils_1.clear)(ctx, this.size);\n        this.paintBase(this.coverColorStyle);\n      } else {\n        this.paintBase();\n      }\n    });\n  }\n\n  clear() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase((0, ColorUtils_1.getStyleFromRgb)(this.trailFillColor, 1 / trail.length));\n    } else {\n      this.draw(ctx => {\n        (0, CanvasUtils_1.clear)(ctx, this.size);\n      });\n    }\n  }\n\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.resize();\n    const container = this.container,\n          needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.resize !== undefined) {\n        plugin.resize();\n      }\n    }\n\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          size = container.canvas.size,\n          newSize = {\n      width: this.element.offsetWidth * pxRatio,\n      height: this.element.offsetHeight * pxRatio\n    };\n\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n\n  drawConnectLine(p1, p2) {\n    this.draw(ctx => {\n      var _a;\n\n      const lineStyle = this.lineStyle(p1, p2);\n\n      if (!lineStyle) {\n        return;\n      }\n\n      const pos1 = p1.getPosition(),\n            pos2 = p2.getPosition();\n      (0, CanvasUtils_1.drawConnectLine)(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    });\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    const container = this.container;\n    this.draw(ctx => {\n      var _a;\n\n      const beginPos = particle.getPosition();\n      (0, CanvasUtils_1.drawGrabLine)(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    });\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const radius = particle.getRadius();\n\n    if (radius <= 0) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor(),\n          psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n    if (!pfColor && !psColor) {\n      return;\n    }\n\n    let [fColor, sColor] = this.getPluginParticleColors(particle);\n\n    if (!fColor || !sColor) {\n      if (!fColor) {\n        fColor = pfColor ? pfColor : undefined;\n      }\n\n      if (!sColor) {\n        sColor = psColor ? psColor : undefined;\n      }\n    }\n\n    const options = this.container.actualOptions,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n          opacity = (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1,\n          strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity,\n          zOpacity = opacity * zOpacityFactor,\n          zStrokeOpacity = strokeOpacity * zOpacityFactor;\n    const colorStyles = {\n      fill: fColor ? (0, ColorUtils_1.getStyleFromHsl)(fColor, zOpacity) : undefined\n    };\n    colorStyles.stroke = sColor ? (0, ColorUtils_1.getStyleFromHsl)(sColor, zStrokeOpacity) : colorStyles.fill;\n    this.draw(ctx => {\n      const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n            container = this.container;\n\n      for (const updater of container.particles.updaters) {\n        if (updater.beforeDraw) {\n          updater.beforeDraw(particle);\n        }\n\n        if (updater.getColorStyles) {\n          const {\n            fill,\n            stroke\n          } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n\n          if (fill) {\n            colorStyles.fill = fill;\n          }\n\n          if (stroke) {\n            colorStyles.stroke = stroke;\n          }\n        }\n      }\n\n      (0, CanvasUtils_1.drawParticle)(container, ctx, particle, delta, colorStyles, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow);\n\n      for (const updater of container.particles.updaters) {\n        if (updater.afterDraw) {\n          updater.afterDraw(particle);\n        }\n      }\n    });\n  }\n\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      (0, CanvasUtils_1.drawPlugin)(ctx, plugin, delta);\n    });\n  }\n\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      (0, CanvasUtils_1.drawParticlePlugin)(ctx, plugin, particle, delta);\n    });\n  }\n\n  initBackground() {\n    const options = this.container.actualOptions,\n          background = options.background,\n          element = this.element,\n          elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n    if (!elementStyle) {\n      return;\n    }\n\n    if (background.color) {\n      const color = (0, ColorUtils_1.colorToRgb)(background.color);\n      elementStyle.backgroundColor = color ? (0, ColorUtils_1.getStyleFromRgb)(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n\n  draw(cb) {\n    if (!this.context) {\n      return;\n    }\n\n    return cb(this.context);\n  }\n\n  initCover() {\n    const options = this.container.actualOptions,\n          cover = options.backgroundMask.cover,\n          color = cover.color,\n          coverRgb = (0, ColorUtils_1.colorToRgb)(color);\n\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this.coverColorStyle = (0, ColorUtils_1.getStyleFromRgb)(coverColor, coverColor.a);\n    }\n  }\n\n  initTrail() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          fillColor = (0, ColorUtils_1.colorToRgb)(trail.fillColor);\n\n    if (fillColor) {\n      const trail = options.particles.move.trail;\n      this.trailFillColor = {\n        r: fillColor.r,\n        g: fillColor.g,\n        b: fillColor.b,\n        a: 1 / trail.length\n      };\n    }\n  }\n\n  getPluginParticleColors(particle) {\n    let fColor, sColor;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = (0, ColorUtils_1.colorToHsl)(plugin.particleFillColor(particle));\n      }\n\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = (0, ColorUtils_1.colorToHsl)(plugin.particleStrokeColor(particle));\n      }\n\n      if (fColor && sColor) {\n        break;\n      }\n    }\n\n    return [fColor, sColor];\n  }\n\n  initStyle() {\n    const element = this.element,\n          options = this.container.actualOptions;\n\n    if (!element) {\n      return;\n    }\n\n    const originalStyle = this.originalStyle;\n\n    if (options.fullScreen.enable) {\n      this.originalStyle = (0, Utils_1.deepExtend)({}, element.style);\n      element.style.setProperty(\"position\", \"fixed\", \"important\");\n      element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n      element.style.setProperty(\"top\", \"0\", \"important\");\n      element.style.setProperty(\"left\", \"0\", \"important\");\n      element.style.setProperty(\"width\", \"100%\", \"important\");\n      element.style.setProperty(\"height\", \"100%\", \"important\");\n    } else if (originalStyle) {\n      element.style.position = originalStyle.position;\n      element.style.zIndex = originalStyle.zIndex;\n      element.style.top = originalStyle.top;\n      element.style.left = originalStyle.left;\n      element.style.width = originalStyle.width;\n      element.style.height = originalStyle.height;\n    }\n\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n\n      const value = options.style[key];\n\n      if (!value) {\n        continue;\n      }\n\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n\n  paintBase(baseColor) {\n    this.draw(ctx => {\n      (0, CanvasUtils_1.paintBase)(ctx, this.size, baseColor);\n    });\n  }\n\n  lineStyle(p1, p2) {\n    return this.draw(ctx => {\n      const options = this.container.actualOptions,\n            connectOptions = options.interactivity.modes.connect;\n      return (0, CanvasUtils_1.gradient)(ctx, p1, p2, connectOptions.links.opacity);\n    });\n  }\n\n}\n\nexports.Canvas = Canvas;","map":{"version":3,"sources":["D:/projects/laptop-design-master/my-app/node_modules/tsparticles/cjs/Core/Canvas.js"],"names":["Object","defineProperty","exports","value","Canvas","CanvasUtils_1","require","ColorUtils_1","Constants_1","Utils_1","constructor","container","size","height","width","context","generatedCanvas","init","resize","initStyle","initCover","initTrail","initBackground","paint","loadCanvas","canvas","_a","element","remove","dataset","Constants","generatedAttribute","originalStyle","deepExtend","style","offsetHeight","offsetWidth","getContext","retina","destroy","draw","ctx","clear","options","actualOptions","backgroundMask","enable","cover","paintBase","coverColorStyle","trail","particles","move","length","trailFillColor","getStyleFromRgb","windowResize","needsRefresh","updateActualOptions","setDensity","plugin","plugins","undefined","refresh","pxRatio","pixelRatio","newSize","oldSize","assign","started","resizeFactor","drawConnectLine","p1","p2","lineStyle","pos1","getPosition","pos2","linksWidth","drawGrabLine","particle","lineColor","opacity","mousePos","beginPos","drawParticle","delta","_b","_c","_d","_e","_f","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","getPluginParticleColors","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","bubble","strokeOpacity","stroke","zOpacity","zStrokeOpacity","colorStyles","fill","getStyleFromHsl","zSizeFactor","sizeRate","updater","updaters","beforeDraw","getColorStyles","composite","shadow","afterDraw","drawPlugin","drawParticlePlugin","background","elementStyle","color","colorToRgb","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","cb","coverRgb","coverColor","r","g","b","a","fillColor","particleFillColor","colorToHsl","particleStrokeColor","fullScreen","setProperty","toString","top","left","key","baseColor","connectOptions","interactivity","modes","connect","gradient","links"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAA7B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,qBAAD,CAA5B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAMF,MAAN,CAAa;AACTM,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAY;AACRC,MAAAA,MAAM,EAAE,CADA;AAERC,MAAAA,KAAK,EAAE;AAFC,KAAZ;AAIA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,SAAKC,MAAL;AACA,SAAKC,SAAL;AACA,SAAKC,SAAL;AACA,SAAKC,SAAL;AACA,SAAKC,cAAL;AACA,SAAKC,KAAL;AACH;;AACDC,EAAAA,UAAU,CAACC,MAAD,EAAS;AACf,QAAIC,EAAJ;;AACA,QAAI,KAAKV,eAAT,EAA0B;AACtB,OAACU,EAAE,GAAG,KAAKC,OAAX,MAAwB,IAAxB,IAAgCD,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACE,MAAH,EAAzD;AACH;;AACD,SAAKZ,eAAL,GACIS,MAAM,CAACI,OAAP,IAAkBrB,WAAW,CAACsB,SAAZ,CAAsBC,kBAAtB,IAA4CN,MAAM,CAACI,OAArE,GACMJ,MAAM,CAACI,OAAP,CAAerB,WAAW,CAACsB,SAAZ,CAAsBC,kBAArC,MAA6D,MADnE,GAEM,KAAKf,eAHf;AAIA,SAAKW,OAAL,GAAeF,MAAf;AACA,SAAKO,aAAL,GAAqB,CAAC,GAAGvB,OAAO,CAACwB,UAAZ,EAAwB,EAAxB,EAA4B,KAAKN,OAAL,CAAaO,KAAzC,CAArB;AACA,SAAKtB,IAAL,CAAUC,MAAV,GAAmBY,MAAM,CAACU,YAA1B;AACA,SAAKvB,IAAL,CAAUE,KAAV,GAAkBW,MAAM,CAACW,WAAzB;AACA,SAAKrB,OAAL,GAAe,KAAKY,OAAL,CAAaU,UAAb,CAAwB,IAAxB,CAAf;AACA,SAAK1B,SAAL,CAAe2B,MAAf,CAAsBrB,IAAtB;AACA,SAAKK,cAAL;AACH;;AACDiB,EAAAA,OAAO,GAAG;AACN,QAAIb,EAAJ;;AACA,QAAI,KAAKV,eAAT,EAA0B;AACtB,OAACU,EAAE,GAAG,KAAKC,OAAX,MAAwB,IAAxB,IAAgCD,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACE,MAAH,EAAzD;AACH;;AACD,SAAKY,IAAL,CAAWC,GAAD,IAAS;AACf,OAAC,GAAGpC,aAAa,CAACqC,KAAlB,EAAyBD,GAAzB,EAA8B,KAAK7B,IAAnC;AACH,KAFD;AAGH;;AACDW,EAAAA,KAAK,GAAG;AACJ,UAAMoB,OAAO,GAAG,KAAKhC,SAAL,CAAeiC,aAA/B;AACA,SAAKJ,IAAL,CAAWC,GAAD,IAAS;AACf,UAAIE,OAAO,CAACE,cAAR,CAAuBC,MAAvB,IAAiCH,OAAO,CAACE,cAAR,CAAuBE,KAA5D,EAAmE;AAC/D,SAAC,GAAG1C,aAAa,CAACqC,KAAlB,EAAyBD,GAAzB,EAA8B,KAAK7B,IAAnC;AACA,aAAKoC,SAAL,CAAe,KAAKC,eAApB;AACH,OAHD,MAIK;AACD,aAAKD,SAAL;AACH;AACJ,KARD;AASH;;AACDN,EAAAA,KAAK,GAAG;AACJ,UAAMC,OAAO,GAAG,KAAKhC,SAAL,CAAeiC,aAA/B;AAAA,UAA8CM,KAAK,GAAGP,OAAO,CAACQ,SAAR,CAAkBC,IAAlB,CAAuBF,KAA7E;;AACA,QAAIP,OAAO,CAACE,cAAR,CAAuBC,MAA3B,EAAmC;AAC/B,WAAKvB,KAAL;AACH,KAFD,MAGK,IAAI2B,KAAK,CAACJ,MAAN,IAAgBI,KAAK,CAACG,MAAN,GAAe,CAA/B,IAAoC,KAAKC,cAA7C,EAA6D;AAC9D,WAAKN,SAAL,CAAe,CAAC,GAAGzC,YAAY,CAACgD,eAAjB,EAAkC,KAAKD,cAAvC,EAAuD,IAAIJ,KAAK,CAACG,MAAjE,CAAf;AACH,KAFI,MAGA;AACD,WAAKb,IAAL,CAAWC,GAAD,IAAS;AACf,SAAC,GAAGpC,aAAa,CAACqC,KAAlB,EAAyBD,GAAzB,EAA8B,KAAK7B,IAAnC;AACH,OAFD;AAGH;AACJ;;AACiB,QAAZ4C,YAAY,GAAG;AACjB,QAAI,CAAC,KAAK7B,OAAV,EAAmB;AACf;AACH;;AACD,SAAKT,MAAL;AACA,UAAMP,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC8C,YAAY,GAAG9C,SAAS,CAAC+C,mBAAV,EAAjD;AACA/C,IAAAA,SAAS,CAACwC,SAAV,CAAoBQ,UAApB;;AACA,SAAK,MAAM,GAAGC,MAAH,CAAX,IAAyBjD,SAAS,CAACkD,OAAnC,EAA4C;AACxC,UAAID,MAAM,CAAC1C,MAAP,KAAkB4C,SAAtB,EAAiC;AAC7BF,QAAAA,MAAM,CAAC1C,MAAP;AACH;AACJ;;AACD,QAAIuC,YAAJ,EAAkB;AACd,YAAM9C,SAAS,CAACoD,OAAV,EAAN;AACH;AACJ;;AACD7C,EAAAA,MAAM,GAAG;AACL,QAAI,CAAC,KAAKS,OAAV,EAAmB;AACf;AACH;;AACD,UAAMhB,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCqD,OAAO,GAAGrD,SAAS,CAAC2B,MAAV,CAAiB2B,UAA7D;AAAA,UAAyErD,IAAI,GAAGD,SAAS,CAACc,MAAV,CAAiBb,IAAjG;AAAA,UAAuGsD,OAAO,GAAG;AAC7GpD,MAAAA,KAAK,EAAE,KAAKa,OAAL,CAAaS,WAAb,GAA2B4B,OAD2E;AAE7GnD,MAAAA,MAAM,EAAE,KAAKc,OAAL,CAAaQ,YAAb,GAA4B6B;AAFyE,KAAjH;;AAIA,QAAIE,OAAO,CAACrD,MAAR,KAAmBD,IAAI,CAACC,MAAxB,IACAqD,OAAO,CAACpD,KAAR,KAAkBF,IAAI,CAACE,KADvB,IAEAoD,OAAO,CAACrD,MAAR,KAAmB,KAAKc,OAAL,CAAad,MAFhC,IAGAqD,OAAO,CAACpD,KAAR,KAAkB,KAAKa,OAAL,CAAab,KAHnC,EAG0C;AACtC;AACH;;AACD,UAAMqD,OAAO,GAAGnE,MAAM,CAACoE,MAAP,CAAc,EAAd,EAAkBxD,IAAlB,CAAhB;AACA,SAAKe,OAAL,CAAab,KAAb,GAAqBF,IAAI,CAACE,KAAL,GAAa,KAAKa,OAAL,CAAaS,WAAb,GAA2B4B,OAA7D;AACA,SAAKrC,OAAL,CAAad,MAAb,GAAsBD,IAAI,CAACC,MAAL,GAAc,KAAKc,OAAL,CAAaQ,YAAb,GAA4B6B,OAAhE;;AACA,QAAI,KAAKrD,SAAL,CAAe0D,OAAnB,EAA4B;AACxB,WAAKC,YAAL,GAAoB;AAChBxD,QAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,GAAaqD,OAAO,CAACrD,KADZ;AAEhBD,QAAAA,MAAM,EAAED,IAAI,CAACC,MAAL,GAAcsD,OAAO,CAACtD;AAFd,OAApB;AAIH;AACJ;;AACD0D,EAAAA,eAAe,CAACC,EAAD,EAAKC,EAAL,EAAS;AACpB,SAAKjC,IAAL,CAAWC,GAAD,IAAS;AACf,UAAIf,EAAJ;;AACA,YAAMgD,SAAS,GAAG,KAAKA,SAAL,CAAeF,EAAf,EAAmBC,EAAnB,CAAlB;;AACA,UAAI,CAACC,SAAL,EAAgB;AACZ;AACH;;AACD,YAAMC,IAAI,GAAGH,EAAE,CAACI,WAAH,EAAb;AAAA,YAA+BC,IAAI,GAAGJ,EAAE,CAACG,WAAH,EAAtC;AACA,OAAC,GAAGvE,aAAa,CAACkE,eAAlB,EAAmC9B,GAAnC,EAAwC,CAACf,EAAE,GAAG8C,EAAE,CAAClC,MAAH,CAAUwC,UAAhB,MAAgC,IAAhC,IAAwCpD,EAAE,KAAK,KAAK,CAApD,GAAwDA,EAAxD,GAA6D,KAAKf,SAAL,CAAe2B,MAAf,CAAsBwC,UAA3H,EAAuIJ,SAAvI,EAAkJC,IAAlJ,EAAwJE,IAAxJ;AACH,KARD;AASH;;AACDE,EAAAA,YAAY,CAACC,QAAD,EAAWC,SAAX,EAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AACjD,UAAMxE,SAAS,GAAG,KAAKA,SAAvB;AACA,SAAK6B,IAAL,CAAWC,GAAD,IAAS;AACf,UAAIf,EAAJ;;AACA,YAAM0D,QAAQ,GAAGJ,QAAQ,CAACJ,WAAT,EAAjB;AACA,OAAC,GAAGvE,aAAa,CAAC0E,YAAlB,EAAgCtC,GAAhC,EAAqC,CAACf,EAAE,GAAGsD,QAAQ,CAAC1C,MAAT,CAAgBwC,UAAtB,MAAsC,IAAtC,IAA8CpD,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmEf,SAAS,CAAC2B,MAAV,CAAiBwC,UAAzH,EAAqIM,QAArI,EAA+ID,QAA/I,EAAyJF,SAAzJ,EAAoKC,OAApK;AACH,KAJD;AAKH;;AACDG,EAAAA,YAAY,CAACL,QAAD,EAAWM,KAAX,EAAkB;AAC1B,QAAI5D,EAAJ,EAAQ6D,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB;;AACA,QAAIX,QAAQ,CAACY,QAAT,IAAqBZ,QAAQ,CAACa,SAAlC,EAA6C;AACzC;AACH;;AACD,UAAMC,MAAM,GAAGd,QAAQ,CAACe,SAAT,EAAf;;AACA,QAAID,MAAM,IAAI,CAAd,EAAiB;AACb;AACH;;AACD,UAAME,OAAO,GAAGhB,QAAQ,CAACiB,YAAT,EAAhB;AAAA,UAAyCC,OAAO,GAAG,CAACxE,EAAE,GAAGsD,QAAQ,CAACmB,cAAT,EAAN,MAAqC,IAArC,IAA6CzE,EAAE,KAAK,KAAK,CAAzD,GAA6DA,EAA7D,GAAkEsE,OAArH;;AACA,QAAI,CAACA,OAAD,IAAY,CAACE,OAAjB,EAA0B;AACtB;AACH;;AACD,QAAI,CAACE,MAAD,EAASC,MAAT,IAAmB,KAAKC,uBAAL,CAA6BtB,QAA7B,CAAvB;;AACA,QAAI,CAACoB,MAAD,IAAW,CAACC,MAAhB,EAAwB;AACpB,UAAI,CAACD,MAAL,EAAa;AACTA,QAAAA,MAAM,GAAGJ,OAAO,GAAGA,OAAH,GAAalC,SAA7B;AACH;;AACD,UAAI,CAACuC,MAAL,EAAa;AACTA,QAAAA,MAAM,GAAGH,OAAO,GAAGA,OAAH,GAAapC,SAA7B;AACH;AACJ;;AACD,UAAMnB,OAAO,GAAG,KAAKhC,SAAL,CAAeiC,aAA/B;AAAA,UAA8C2D,aAAa,GAAGvB,QAAQ,CAACrC,OAAT,CAAiB6D,MAA/E;AAAA,UAAuFC,cAAc,GAAG,CAAC,IAAIzB,QAAQ,CAAC0B,YAAd,KAA+BH,aAAa,CAACI,WAArJ;AAAA,UAAkKzB,OAAO,GAAG,CAACO,EAAE,GAAG,CAACF,EAAE,GAAGP,QAAQ,CAAC4B,MAAT,CAAgB1B,OAAtB,MAAmC,IAAnC,IAA2CK,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgE,CAACC,EAAE,GAAGR,QAAQ,CAACE,OAAf,MAA4B,IAA5B,IAAoCM,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACrF,KAAtI,MAAiJ,IAAjJ,IAAyJsF,EAAE,KAAK,KAAK,CAArK,GAAyKA,EAAzK,GAA8K,CAA1V;AAAA,UAA6VoB,aAAa,GAAG,CAAClB,EAAE,GAAG,CAACD,EAAE,GAAGV,QAAQ,CAAC8B,MAAf,MAA2B,IAA3B,IAAmCpB,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACR,OAArE,MAAkF,IAAlF,IAA0FS,EAAE,KAAK,KAAK,CAAtG,GAA0GA,EAA1G,GAA+GT,OAA5d;AAAA,UAAqe6B,QAAQ,GAAG7B,OAAO,GAAGuB,cAA1f;AAAA,UAA0gBO,cAAc,GAAGH,aAAa,GAAGJ,cAA3iB;AACA,UAAMQ,WAAW,GAAG;AAChBC,MAAAA,IAAI,EAAEd,MAAM,GAAG,CAAC,GAAG7F,YAAY,CAAC4G,eAAjB,EAAkCf,MAAlC,EAA0CW,QAA1C,CAAH,GAAyDjD;AADrD,KAApB;AAGAmD,IAAAA,WAAW,CAACH,MAAZ,GAAqBT,MAAM,GAAG,CAAC,GAAG9F,YAAY,CAAC4G,eAAjB,EAAkCd,MAAlC,EAA0CW,cAA1C,CAAH,GAA+DC,WAAW,CAACC,IAAtG;AACA,SAAK1E,IAAL,CAAWC,GAAD,IAAS;AACf,YAAM2E,WAAW,GAAG,CAAC,IAAIpC,QAAQ,CAAC0B,YAAd,KAA+BH,aAAa,CAACc,QAAjE;AAAA,YAA2E1G,SAAS,GAAG,KAAKA,SAA5F;;AACA,WAAK,MAAM2G,OAAX,IAAsB3G,SAAS,CAACwC,SAAV,CAAoBoE,QAA1C,EAAoD;AAChD,YAAID,OAAO,CAACE,UAAZ,EAAwB;AACpBF,UAAAA,OAAO,CAACE,UAAR,CAAmBxC,QAAnB;AACH;;AACD,YAAIsC,OAAO,CAACG,cAAZ,EAA4B;AACxB,gBAAM;AAAEP,YAAAA,IAAF;AAAQJ,YAAAA;AAAR,cAAmBQ,OAAO,CAACG,cAAR,CAAuBzC,QAAvB,EAAiCvC,GAAjC,EAAsCqD,MAAtC,EAA8CiB,QAA9C,CAAzB;;AACA,cAAIG,IAAJ,EAAU;AACND,YAAAA,WAAW,CAACC,IAAZ,GAAmBA,IAAnB;AACH;;AACD,cAAIJ,MAAJ,EAAY;AACRG,YAAAA,WAAW,CAACH,MAAZ,GAAqBA,MAArB;AACH;AACJ;AACJ;;AACD,OAAC,GAAGzG,aAAa,CAACgF,YAAlB,EAAgC1E,SAAhC,EAA2C8B,GAA3C,EAAgDuC,QAAhD,EAA0DM,KAA1D,EAAiE2B,WAAjE,EAA8EtE,OAAO,CAACE,cAAR,CAAuBC,MAArG,EAA6GH,OAAO,CAACE,cAAR,CAAuB6E,SAApI,EAA+I5B,MAAM,GAAGsB,WAAxJ,EAAqKL,QAArK,EAA+K/B,QAAQ,CAACrC,OAAT,CAAiBgF,MAAhM;;AACA,WAAK,MAAML,OAAX,IAAsB3G,SAAS,CAACwC,SAAV,CAAoBoE,QAA1C,EAAoD;AAChD,YAAID,OAAO,CAACM,SAAZ,EAAuB;AACnBN,UAAAA,OAAO,CAACM,SAAR,CAAkB5C,QAAlB;AACH;AACJ;AACJ,KAtBD;AAuBH;;AACD6C,EAAAA,UAAU,CAACjE,MAAD,EAAS0B,KAAT,EAAgB;AACtB,SAAK9C,IAAL,CAAWC,GAAD,IAAS;AACf,OAAC,GAAGpC,aAAa,CAACwH,UAAlB,EAA8BpF,GAA9B,EAAmCmB,MAAnC,EAA2C0B,KAA3C;AACH,KAFD;AAGH;;AACDwC,EAAAA,kBAAkB,CAAClE,MAAD,EAASoB,QAAT,EAAmBM,KAAnB,EAA0B;AACxC,SAAK9C,IAAL,CAAWC,GAAD,IAAS;AACf,OAAC,GAAGpC,aAAa,CAACyH,kBAAlB,EAAsCrF,GAAtC,EAA2CmB,MAA3C,EAAmDoB,QAAnD,EAA6DM,KAA7D;AACH,KAFD;AAGH;;AACDhE,EAAAA,cAAc,GAAG;AACb,UAAMqB,OAAO,GAAG,KAAKhC,SAAL,CAAeiC,aAA/B;AAAA,UAA8CmF,UAAU,GAAGpF,OAAO,CAACoF,UAAnE;AAAA,UAA+EpG,OAAO,GAAG,KAAKA,OAA9F;AAAA,UAAuGqG,YAAY,GAAGrG,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACO,KAAhL;;AACA,QAAI,CAAC8F,YAAL,EAAmB;AACf;AACH;;AACD,QAAID,UAAU,CAACE,KAAf,EAAsB;AAClB,YAAMA,KAAK,GAAG,CAAC,GAAG1H,YAAY,CAAC2H,UAAjB,EAA6BH,UAAU,CAACE,KAAxC,CAAd;AACAD,MAAAA,YAAY,CAACG,eAAb,GAA+BF,KAAK,GAAG,CAAC,GAAG1H,YAAY,CAACgD,eAAjB,EAAkC0E,KAAlC,EAAyCF,UAAU,CAAC7C,OAApD,CAAH,GAAkE,EAAtG;AACH,KAHD,MAIK;AACD8C,MAAAA,YAAY,CAACG,eAAb,GAA+B,EAA/B;AACH;;AACDH,IAAAA,YAAY,CAACI,eAAb,GAA+BL,UAAU,CAACM,KAAX,IAAoB,EAAnD;AACAL,IAAAA,YAAY,CAACM,kBAAb,GAAkCP,UAAU,CAACQ,QAAX,IAAuB,EAAzD;AACAP,IAAAA,YAAY,CAACQ,gBAAb,GAAgCT,UAAU,CAACU,MAAX,IAAqB,EAArD;AACAT,IAAAA,YAAY,CAACU,cAAb,GAA8BX,UAAU,CAACnH,IAAX,IAAmB,EAAjD;AACH;;AACD4B,EAAAA,IAAI,CAACmG,EAAD,EAAK;AACL,QAAI,CAAC,KAAK5H,OAAV,EAAmB;AACf;AACH;;AACD,WAAO4H,EAAE,CAAC,KAAK5H,OAAN,CAAT;AACH;;AACDK,EAAAA,SAAS,GAAG;AACR,UAAMuB,OAAO,GAAG,KAAKhC,SAAL,CAAeiC,aAA/B;AAAA,UAA8CG,KAAK,GAAGJ,OAAO,CAACE,cAAR,CAAuBE,KAA7E;AAAA,UAAoFkF,KAAK,GAAGlF,KAAK,CAACkF,KAAlG;AAAA,UAAyGW,QAAQ,GAAG,CAAC,GAAGrI,YAAY,CAAC2H,UAAjB,EAA6BD,KAA7B,CAApH;;AACA,QAAIW,QAAJ,EAAc;AACV,YAAMC,UAAU,GAAG;AACfC,QAAAA,CAAC,EAAEF,QAAQ,CAACE,CADG;AAEfC,QAAAA,CAAC,EAAEH,QAAQ,CAACG,CAFG;AAGfC,QAAAA,CAAC,EAAEJ,QAAQ,CAACI,CAHG;AAIfC,QAAAA,CAAC,EAAElG,KAAK,CAACmC;AAJM,OAAnB;AAMA,WAAKjC,eAAL,GAAuB,CAAC,GAAG1C,YAAY,CAACgD,eAAjB,EAAkCsF,UAAlC,EAA8CA,UAAU,CAACI,CAAzD,CAAvB;AACH;AACJ;;AACD5H,EAAAA,SAAS,GAAG;AACR,UAAMsB,OAAO,GAAG,KAAKhC,SAAL,CAAeiC,aAA/B;AAAA,UAA8CM,KAAK,GAAGP,OAAO,CAACQ,SAAR,CAAkBC,IAAlB,CAAuBF,KAA7E;AAAA,UAAoFgG,SAAS,GAAG,CAAC,GAAG3I,YAAY,CAAC2H,UAAjB,EAA6BhF,KAAK,CAACgG,SAAnC,CAAhG;;AACA,QAAIA,SAAJ,EAAe;AACX,YAAMhG,KAAK,GAAGP,OAAO,CAACQ,SAAR,CAAkBC,IAAlB,CAAuBF,KAArC;AACA,WAAKI,cAAL,GAAsB;AAClBwF,QAAAA,CAAC,EAAEI,SAAS,CAACJ,CADK;AAElBC,QAAAA,CAAC,EAAEG,SAAS,CAACH,CAFK;AAGlBC,QAAAA,CAAC,EAAEE,SAAS,CAACF,CAHK;AAIlBC,QAAAA,CAAC,EAAE,IAAI/F,KAAK,CAACG;AAJK,OAAtB;AAMH;AACJ;;AACDiD,EAAAA,uBAAuB,CAACtB,QAAD,EAAW;AAC9B,QAAIoB,MAAJ,EAAYC,MAAZ;;AACA,SAAK,MAAM,GAAGzC,MAAH,CAAX,IAAyB,KAAKjD,SAAL,CAAekD,OAAxC,EAAiD;AAC7C,UAAI,CAACuC,MAAD,IAAWxC,MAAM,CAACuF,iBAAtB,EAAyC;AACrC/C,QAAAA,MAAM,GAAG,CAAC,GAAG7F,YAAY,CAAC6I,UAAjB,EAA6BxF,MAAM,CAACuF,iBAAP,CAAyBnE,QAAzB,CAA7B,CAAT;AACH;;AACD,UAAI,CAACqB,MAAD,IAAWzC,MAAM,CAACyF,mBAAtB,EAA2C;AACvChD,QAAAA,MAAM,GAAG,CAAC,GAAG9F,YAAY,CAAC6I,UAAjB,EAA6BxF,MAAM,CAACyF,mBAAP,CAA2BrE,QAA3B,CAA7B,CAAT;AACH;;AACD,UAAIoB,MAAM,IAAIC,MAAd,EAAsB;AAClB;AACH;AACJ;;AACD,WAAO,CAACD,MAAD,EAASC,MAAT,CAAP;AACH;;AACDlF,EAAAA,SAAS,GAAG;AACR,UAAMQ,OAAO,GAAG,KAAKA,OAArB;AAAA,UAA8BgB,OAAO,GAAG,KAAKhC,SAAL,CAAeiC,aAAvD;;AACA,QAAI,CAACjB,OAAL,EAAc;AACV;AACH;;AACD,UAAMK,aAAa,GAAG,KAAKA,aAA3B;;AACA,QAAIW,OAAO,CAAC2G,UAAR,CAAmBxG,MAAvB,EAA+B;AAC3B,WAAKd,aAAL,GAAqB,CAAC,GAAGvB,OAAO,CAACwB,UAAZ,EAAwB,EAAxB,EAA4BN,OAAO,CAACO,KAApC,CAArB;AACAP,MAAAA,OAAO,CAACO,KAAR,CAAcqH,WAAd,CAA0B,UAA1B,EAAsC,OAAtC,EAA+C,WAA/C;AACA5H,MAAAA,OAAO,CAACO,KAAR,CAAcqH,WAAd,CAA0B,SAA1B,EAAqC5G,OAAO,CAAC2G,UAAR,CAAmB9C,MAAnB,CAA0BgD,QAA1B,CAAmC,EAAnC,CAArC,EAA6E,WAA7E;AACA7H,MAAAA,OAAO,CAACO,KAAR,CAAcqH,WAAd,CAA0B,KAA1B,EAAiC,GAAjC,EAAsC,WAAtC;AACA5H,MAAAA,OAAO,CAACO,KAAR,CAAcqH,WAAd,CAA0B,MAA1B,EAAkC,GAAlC,EAAuC,WAAvC;AACA5H,MAAAA,OAAO,CAACO,KAAR,CAAcqH,WAAd,CAA0B,OAA1B,EAAmC,MAAnC,EAA2C,WAA3C;AACA5H,MAAAA,OAAO,CAACO,KAAR,CAAcqH,WAAd,CAA0B,QAA1B,EAAoC,MAApC,EAA4C,WAA5C;AACH,KARD,MASK,IAAIvH,aAAJ,EAAmB;AACpBL,MAAAA,OAAO,CAACO,KAAR,CAAcqG,QAAd,GAAyBvG,aAAa,CAACuG,QAAvC;AACA5G,MAAAA,OAAO,CAACO,KAAR,CAAcsE,MAAd,GAAuBxE,aAAa,CAACwE,MAArC;AACA7E,MAAAA,OAAO,CAACO,KAAR,CAAcuH,GAAd,GAAoBzH,aAAa,CAACyH,GAAlC;AACA9H,MAAAA,OAAO,CAACO,KAAR,CAAcwH,IAAd,GAAqB1H,aAAa,CAAC0H,IAAnC;AACA/H,MAAAA,OAAO,CAACO,KAAR,CAAcpB,KAAd,GAAsBkB,aAAa,CAAClB,KAApC;AACAa,MAAAA,OAAO,CAACO,KAAR,CAAcrB,MAAd,GAAuBmB,aAAa,CAACnB,MAArC;AACH;;AACD,SAAK,MAAM8I,GAAX,IAAkBhH,OAAO,CAACT,KAA1B,EAAiC;AAC7B,UAAI,CAACyH,GAAD,IAAQ,CAAChH,OAAO,CAACT,KAArB,EAA4B;AACxB;AACH;;AACD,YAAM/B,KAAK,GAAGwC,OAAO,CAACT,KAAR,CAAcyH,GAAd,CAAd;;AACA,UAAI,CAACxJ,KAAL,EAAY;AACR;AACH;;AACDwB,MAAAA,OAAO,CAACO,KAAR,CAAcqH,WAAd,CAA0BI,GAA1B,EAA+BxJ,KAA/B,EAAsC,WAAtC;AACH;AACJ;;AACD6C,EAAAA,SAAS,CAAC4G,SAAD,EAAY;AACjB,SAAKpH,IAAL,CAAWC,GAAD,IAAS;AACf,OAAC,GAAGpC,aAAa,CAAC2C,SAAlB,EAA6BP,GAA7B,EAAkC,KAAK7B,IAAvC,EAA6CgJ,SAA7C;AACH,KAFD;AAGH;;AACDlF,EAAAA,SAAS,CAACF,EAAD,EAAKC,EAAL,EAAS;AACd,WAAO,KAAKjC,IAAL,CAAWC,GAAD,IAAS;AACtB,YAAME,OAAO,GAAG,KAAKhC,SAAL,CAAeiC,aAA/B;AAAA,YAA8CiH,cAAc,GAAGlH,OAAO,CAACmH,aAAR,CAAsBC,KAAtB,CAA4BC,OAA3F;AACA,aAAO,CAAC,GAAG3J,aAAa,CAAC4J,QAAlB,EAA4BxH,GAA5B,EAAiC+B,EAAjC,EAAqCC,EAArC,EAAyCoF,cAAc,CAACK,KAAf,CAAqBhF,OAA9D,CAAP;AACH,KAHM,CAAP;AAIH;;AAxSQ;;AA0SbhF,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nconst CanvasUtils_1 = require(\"../Utils/CanvasUtils\");\nconst ColorUtils_1 = require(\"../Utils/ColorUtils\");\nconst Constants_1 = require(\"./Utils/Constants\");\nconst Utils_1 = require(\"../Utils/Utils\");\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        this.initStyle();\n        this.initCover();\n        this.initTrail();\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas =\n            canvas.dataset && Constants_1.Constants.generatedAttribute in canvas.dataset\n                ? canvas.dataset[Constants_1.Constants.generatedAttribute] === \"true\"\n                : this.generatedCanvas;\n        this.element = canvas;\n        this.originalStyle = (0, Utils_1.deepExtend)({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.draw((ctx) => {\n            (0, CanvasUtils_1.clear)(ctx, this.size);\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                (0, CanvasUtils_1.clear)(ctx, this.size);\n                this.paintBase(this.coverColorStyle);\n            }\n            else {\n                this.paintBase();\n            }\n        });\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase((0, ColorUtils_1.getStyleFromRgb)(this.trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                (0, CanvasUtils_1.clear)(ctx, this.size);\n            });\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.resize !== undefined) {\n                plugin.resize();\n            }\n        }\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    drawConnectLine(p1, p2) {\n        this.draw((ctx) => {\n            var _a;\n            const lineStyle = this.lineStyle(p1, p2);\n            if (!lineStyle) {\n                return;\n            }\n            const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            (0, CanvasUtils_1.drawConnectLine)(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n        });\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        const container = this.container;\n        this.draw((ctx) => {\n            var _a;\n            const beginPos = particle.getPosition();\n            (0, CanvasUtils_1.drawGrabLine)(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n        });\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e, _f;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        if (!pfColor && !psColor) {\n            return;\n        }\n        let [fColor, sColor] = this.getPluginParticleColors(particle);\n        if (!fColor || !sColor) {\n            if (!fColor) {\n                fColor = pfColor ? pfColor : undefined;\n            }\n            if (!sColor) {\n                sColor = psColor ? psColor : undefined;\n            }\n        }\n        const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1, strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor;\n        const colorStyles = {\n            fill: fColor ? (0, ColorUtils_1.getStyleFromHsl)(fColor, zOpacity) : undefined,\n        };\n        colorStyles.stroke = sColor ? (0, ColorUtils_1.getStyleFromHsl)(sColor, zStrokeOpacity) : colorStyles.fill;\n        this.draw((ctx) => {\n            const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate, container = this.container;\n            for (const updater of container.particles.updaters) {\n                if (updater.beforeDraw) {\n                    updater.beforeDraw(particle);\n                }\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n            }\n            (0, CanvasUtils_1.drawParticle)(container, ctx, particle, delta, colorStyles, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow);\n            for (const updater of container.particles.updaters) {\n                if (updater.afterDraw) {\n                    updater.afterDraw(particle);\n                }\n            }\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            (0, CanvasUtils_1.drawPlugin)(ctx, plugin, delta);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            (0, CanvasUtils_1.drawParticlePlugin)(ctx, plugin, particle, delta);\n        });\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = (0, ColorUtils_1.colorToRgb)(background.color);\n            elementStyle.backgroundColor = color ? (0, ColorUtils_1.getStyleFromRgb)(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    draw(cb) {\n        if (!this.context) {\n            return;\n        }\n        return cb(this.context);\n    }\n    initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = (0, ColorUtils_1.colorToRgb)(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this.coverColorStyle = (0, ColorUtils_1.getStyleFromRgb)(coverColor, coverColor.a);\n        }\n    }\n    initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, fillColor = (0, ColorUtils_1.colorToRgb)(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this.trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const [, plugin] of this.container.plugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = (0, ColorUtils_1.colorToHsl)(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = (0, ColorUtils_1.colorToHsl)(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        const originalStyle = this.originalStyle;\n        if (options.fullScreen.enable) {\n            this.originalStyle = (0, Utils_1.deepExtend)({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else if (originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    paintBase(baseColor) {\n        this.draw((ctx) => {\n            (0, CanvasUtils_1.paintBase)(ctx, this.size, baseColor);\n        });\n    }\n    lineStyle(p1, p2) {\n        return this.draw((ctx) => {\n            const options = this.container.actualOptions, connectOptions = options.interactivity.modes.connect;\n            return (0, CanvasUtils_1.gradient)(ctx, p1, p2, connectOptions.links.opacity);\n        });\n    }\n}\nexports.Canvas = Canvas;\n"]},"metadata":{},"sourceType":"script"}