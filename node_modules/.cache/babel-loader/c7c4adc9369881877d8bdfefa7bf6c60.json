{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:\\\\projects\\\\laptop-design-master\\\\my-app\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceImageColor = exports.downloadSvgImage = exports.loadImage = void 0;\n\nvar ColorUtils_1 = require(\"../../Utils/ColorUtils\");\n\nvar currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  var svgData = imageShape.svgData;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  var colorStyle = (0, ColorUtils_1.getStyleFromHsl)(color, opacity);\n\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, function () {\n      return colorStyle;\n    });\n  }\n\n  var preFillIndex = svgData.indexOf(\">\");\n  return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat(colorStyle, \"\\\"\").concat(svgData.substring(preFillIndex));\n}\n\nfunction loadImage(_x) {\n  return _loadImage.apply(this, arguments);\n}\n\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              image.loading = true;\n              var img = new Image();\n              img.addEventListener(\"load\", function () {\n                image.element = img;\n                image.loading = false;\n                resolve();\n              });\n              img.addEventListener(\"error\", function () {\n                image.error = true;\n                image.loading = false;\n                console.error(\"Error tsParticles - loading image: \".concat(image.source));\n                resolve();\n              });\n              img.src = image.source;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImage.apply(this, arguments);\n}\n\nexports.loadImage = loadImage;\n\nfunction downloadSvgImage(_x2) {\n  return _downloadSvgImage.apply(this, arguments);\n}\n\nfunction _downloadSvgImage() {\n  _downloadSvgImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(image.type !== \"svg\")) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return loadImage(image);\n\n          case 3:\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            image.loading = true;\n            _context2.next = 7;\n            return fetch(image.source);\n\n          case 7:\n            response = _context2.sent;\n            image.loading = false;\n\n            if (!response.ok) {\n              console.error(\"Error tsParticles - Image not found\");\n              image.error = true;\n            }\n\n            if (image.error) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 13;\n            return response.text();\n\n          case 13:\n            image.svgData = _context2.sent;\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _downloadSvgImage.apply(this, arguments);\n}\n\nexports.downloadSvgImage = downloadSvgImage;\n\nfunction replaceImageColor(image, imageData, color, particle) {\n  var _a, _b, _c;\n\n  var svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1);\n  var svg = new Blob([svgColoredData], {\n    type: \"image/svg+xml\"\n  });\n  var domUrl = URL || window.URL || window.webkitURL || window;\n  var url = domUrl.createObjectURL(svg);\n  var img = new Image();\n  var imageRes = {\n    data: Object.assign(Object.assign({}, image), {\n      svgData: svgColoredData\n    }),\n    ratio: imageData.width / imageData.height,\n    replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n    source: imageData.src\n  };\n  img.addEventListener(\"load\", function () {\n    var pImage = particle.image;\n\n    if (pImage) {\n      pImage.loaded = true;\n      image.element = img;\n    }\n\n    domUrl.revokeObjectURL(url);\n  });\n  img.addEventListener(\"error\", function () {\n    domUrl.revokeObjectURL(url);\n    var img2 = Object.assign(Object.assign({}, image), {\n      error: false,\n      loading: true\n    });\n    loadImage(img2).then(function () {\n      var pImage = particle.image;\n\n      if (pImage) {\n        image.element = img2.element;\n        pImage.loaded = true;\n      }\n    });\n  });\n  img.src = url;\n  return imageRes;\n}\n\nexports.replaceImageColor = replaceImageColor;","map":{"version":3,"sources":["D:/projects/laptop-design-master/my-app/node_modules/tsparticles/cjs/Shapes/Image/Utils.js"],"names":["Object","defineProperty","exports","value","replaceImageColor","downloadSvgImage","loadImage","ColorUtils_1","require","currentColorRegex","replaceColorSvg","imageShape","color","opacity","svgData","colorStyle","getStyleFromHsl","includes","replace","preFillIndex","indexOf","substring","image","Promise","resolve","loading","img","Image","addEventListener","element","error","console","source","src","type","fetch","response","ok","text","imageData","particle","_a","_b","_c","svgColoredData","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","imageRes","data","assign","ratio","width","height","replaceColor","replace_color","pImage","loaded","revokeObjectURL","img2","then"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceImageColor = exports.downloadSvgImage = exports.loadImage = void 0;\nconst ColorUtils_1 = require(\"../../Utils/ColorUtils\");\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = (0, ColorUtils_1.getStyleFromHsl)(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nasync function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        img.addEventListener(\"load\", () => {\n            image.element = img;\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.error = true;\n            image.loading = false;\n            console.error(`Error tsParticles - loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexports.loadImage = loadImage;\nasync function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    image.loading = false;\n    if (!response.ok) {\n        console.error(\"Error tsParticles - Image not found\");\n        image.error = true;\n    }\n    if (!image.error) {\n        image.svgData = await response.text();\n    }\n}\nexports.downloadSvgImage = downloadSvgImage;\nfunction replaceImageColor(image, imageData, color, particle) {\n    var _a, _b, _c;\n    const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1);\n    const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n    const domUrl = URL || window.URL || window.webkitURL || window;\n    const url = domUrl.createObjectURL(svg);\n    const img = new Image();\n    const imageRes = {\n        data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src,\n    };\n    img.addEventListener(\"load\", () => {\n        const pImage = particle.image;\n        if (pImage) {\n            pImage.loaded = true;\n            image.element = img;\n        }\n        domUrl.revokeObjectURL(url);\n    });\n    img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        const img2 = Object.assign(Object.assign({}, image), { error: false, loading: true });\n        loadImage(img2).then(() => {\n            const pImage = particle.image;\n            if (pImage) {\n                image.element = img2.element;\n                pImage.loaded = true;\n            }\n        });\n    });\n    img.src = url;\n    return imageRes;\n}\nexports.replaceImageColor = replaceImageColor;\n"]},"metadata":{},"sourceType":"script"}