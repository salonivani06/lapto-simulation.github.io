{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Vector = void 0;\n\nclass Vector {\n  constructor(xOrCoords, y) {\n    if (typeof xOrCoords !== \"number\" && xOrCoords) {\n      this.x = xOrCoords.x;\n      this.y = xOrCoords.y;\n    } else if (xOrCoords !== undefined && y !== undefined) {\n      this.x = xOrCoords;\n      this.y = y;\n    } else {\n      throw new Error(\"tsParticles - Vector not initialized correctly\");\n    }\n  }\n\n  static clone(source) {\n    return Vector.create(source.x, source.y);\n  }\n\n  static create(x, y) {\n    return new Vector(x, y);\n  }\n\n  static get origin() {\n    return Vector.create(0, 0);\n  }\n\n  get angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  set angle(angle) {\n    this.updateFromAngle(angle, this.length);\n  }\n\n  get length() {\n    return Math.sqrt(this.getLengthSq());\n  }\n\n  set length(length) {\n    this.updateFromAngle(this.angle, length);\n  }\n\n  add(v) {\n    return Vector.create(this.x + v.x, this.y + v.y);\n  }\n\n  addTo(v) {\n    this.x += v.x;\n    this.y += v.y;\n  }\n\n  sub(v) {\n    return Vector.create(this.x - v.x, this.y - v.y);\n  }\n\n  subFrom(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n  }\n\n  mult(n) {\n    return Vector.create(this.x * n, this.y * n);\n  }\n\n  multTo(n) {\n    this.x *= n;\n    this.y *= n;\n  }\n\n  div(n) {\n    return Vector.create(this.x / n, this.y / n);\n  }\n\n  divTo(n) {\n    this.x /= n;\n    this.y /= n;\n  }\n\n  distanceTo(v) {\n    return this.sub(v).length;\n  }\n\n  getLengthSq() {\n    return this.x ** 2 + this.y ** 2;\n  }\n\n  distanceToSq(v) {\n    return this.sub(v).getLengthSq();\n  }\n\n  manhattanDistanceTo(v) {\n    return Math.abs(v.x - this.x) + Math.abs(v.y - this.y);\n  }\n\n  copy() {\n    return Vector.clone(this);\n  }\n\n  setTo(v) {\n    this.x = v.x;\n    this.y = v.y;\n  }\n\n  rotate(angle) {\n    return Vector.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle));\n  }\n\n  updateFromAngle(angle, length) {\n    this.x = Math.cos(angle) * length;\n    this.y = Math.sin(angle) * length;\n  }\n\n}\n\nexports.Vector = Vector;","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/project/laptop-design-master/my-app/node_modules/tsparticles/cjs/Core/Utils/Vector.js"],"names":["Object","defineProperty","exports","value","Vector","constructor","xOrCoords","y","x","undefined","Error","clone","source","create","origin","angle","Math","atan2","updateFromAngle","length","sqrt","getLengthSq","add","v","addTo","sub","subFrom","mult","n","multTo","div","divTo","distanceTo","distanceToSq","manhattanDistanceTo","abs","copy","setTo","rotate","cos","sin"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vector = void 0;\nclass Vector {\n    constructor(xOrCoords, y) {\n        if (typeof xOrCoords !== \"number\" && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n        }\n        else {\n            throw new Error(\"tsParticles - Vector not initialized correctly\");\n        }\n    }\n    static clone(source) {\n        return Vector.create(source.x, source.y);\n    }\n    static create(x, y) {\n        return new Vector(x, y);\n    }\n    static get origin() {\n        return Vector.create(0, 0);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this.updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this.updateFromAngle(this.angle, length);\n    }\n    add(v) {\n        return Vector.create(this.x + v.x, this.y + v.y);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n    }\n    sub(v) {\n        return Vector.create(this.x - v.x, this.y - v.y);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n    }\n    mult(n) {\n        return Vector.create(this.x * n, this.y * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n    }\n    div(n) {\n        return Vector.create(this.x / n, this.y / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    getLengthSq() {\n        return this.x ** 2 + this.y ** 2;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    manhattanDistanceTo(v) {\n        return Math.abs(v.x - this.x) + Math.abs(v.y - this.y);\n    }\n    copy() {\n        return Vector.clone(this);\n    }\n    setTo(v) {\n        this.x = v.x;\n        this.y = v.y;\n    }\n    rotate(angle) {\n        return Vector.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle));\n    }\n    updateFromAngle(angle, length) {\n        this.x = Math.cos(angle) * length;\n        this.y = Math.sin(angle) * length;\n    }\n}\nexports.Vector = Vector;\n"]},"metadata":{},"sourceType":"script"}