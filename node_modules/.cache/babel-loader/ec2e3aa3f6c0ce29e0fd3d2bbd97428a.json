{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nconst ColorUtils_1 = require(\"../../../Utils/ColorUtils\");\n\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\n\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\n\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\n\nconst Utils_1 = require(\"../../../Utils/Utils\");\n\nclass Grabber extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n    return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n  }\n\n  reset() {}\n\n  async interact() {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n    if (!interactivity.events.onHover.enable || container.interactivity.status !== Constants_1.Constants.mouseMoveEvent) {\n      return;\n    }\n\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const distance = container.retina.grabModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n    for (const particle of query) {\n      const pos = particle.getPosition(),\n            pointDistance = (0, NumberUtils_1.getDistance)(pos, mousePos);\n\n      if (pointDistance > distance) {\n        continue;\n      }\n\n      const grabLineOptions = interactivity.modes.grab.links,\n            lineOpacity = grabLineOptions.opacity,\n            opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n      if (opacityLine <= 0) {\n        continue;\n      }\n\n      const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n      if (!container.particles.grabLineColor) {\n        const linksOptions = options.interactivity.modes.grab.links;\n        container.particles.grabLineColor = (0, ColorUtils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n      }\n\n      const colorLine = (0, ColorUtils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n\n      if (!colorLine) {\n        return;\n      }\n\n      container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n    }\n  }\n\n}\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["D:/projects/laptop-design-master/my-app/node_modules/tsparticles/cjs/Interactions/External/Grab/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","ColorUtils_1","require","Constants_1","ExternalInteractorBase_1","NumberUtils_1","Utils_1","ExternalInteractorBase","constructor","container","isEnabled","mouse","interactivity","events","actualOptions","onHover","enable","position","isInArray","mode","reset","interact","_a","options","status","Constants","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","getDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","colorLine","getLinkColor","undefined","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst ColorUtils_1 = require(\"../../../Utils/ColorUtils\");\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\nconst Utils_1 = require(\"../../../Utils/Utils\");\nclass Grabber extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    async interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.events.onHover.enable || container.interactivity.status !== Constants_1.Constants.mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = (0, NumberUtils_1.getDistance)(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n            if (!container.particles.grabLineColor) {\n                const linksOptions = options.interactivity.modes.grab.links;\n                container.particles.grabLineColor = (0, ColorUtils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = (0, ColorUtils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                return;\n            }\n            container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}