{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"D:/projects/laptop-design-master/my-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CircleWarp = void 0;\n\nvar Circle_1 = require(\"./Circle\");\n\nvar Rectangle_1 = require(\"./Rectangle\");\n\nvar CircleWarp = /*#__PURE__*/function (_Circle_1$Circle) {\n  _inherits(CircleWarp, _Circle_1$Circle);\n\n  var _super = _createSuper(CircleWarp);\n\n  function CircleWarp(x, y, radius, canvasSize) {\n    var _this;\n\n    _classCallCheck(this, CircleWarp);\n\n    _this = _super.call(this, x, y, radius);\n    _this.canvasSize = canvasSize;\n    _this.canvasSize = Object.assign({}, canvasSize);\n    return _this;\n  }\n\n  _createClass(CircleWarp, [{\n    key: \"contains\",\n    value: function contains(point) {\n      if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, point)) {\n        return true;\n      }\n\n      var posNE = {\n        x: point.x - this.canvasSize.width,\n        y: point.y\n      };\n\n      if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posNE)) {\n        return true;\n      }\n\n      var posSE = {\n        x: point.x - this.canvasSize.width,\n        y: point.y - this.canvasSize.height\n      };\n\n      if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posSE)) {\n        return true;\n      }\n\n      var posSW = {\n        x: point.x,\n        y: point.y - this.canvasSize.height\n      };\n      return _get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posSW);\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range) {\n      if (_get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, range)) {\n        return true;\n      }\n\n      var rect = range,\n          circle = range,\n          newPos = {\n        x: range.position.x - this.canvasSize.width,\n        y: range.position.y - this.canvasSize.height\n      };\n\n      if (circle.radius !== undefined) {\n        var biggerCircle = new Circle_1.Circle(newPos.x, newPos.y, circle.radius * 2);\n        return _get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, biggerCircle);\n      } else if (rect.size !== undefined) {\n        var rectSW = new Rectangle_1.Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n        return _get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, rectSW);\n      }\n\n      return false;\n    }\n  }]);\n\n  return CircleWarp;\n}(Circle_1.Circle);\n\nexports.CircleWarp = CircleWarp;","map":{"version":3,"sources":["D:/projects/laptop-design-master/my-app/node_modules/tsparticles/cjs/Core/Utils/CircleWarp.js"],"names":["Object","defineProperty","exports","value","CircleWarp","Circle_1","require","Rectangle_1","x","y","radius","canvasSize","assign","point","posNE","width","posSE","height","posSW","range","rect","circle","newPos","position","undefined","biggerCircle","Circle","size","rectSW","Rectangle"],"mappings":"AAAA;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;IACMF,U;;;;;AACF,sBAAYI,CAAZ,EAAeC,CAAf,EAAkBC,MAAlB,EAA0BC,UAA1B,EAAsC;AAAA;;AAAA;;AAClC,8BAAMH,CAAN,EAASC,CAAT,EAAYC,MAAZ;AACA,UAAKC,UAAL,GAAkBA,UAAlB;AACA,UAAKA,UAAL,GAAkBX,MAAM,CAACY,MAAP,CAAc,EAAd,EAAkBD,UAAlB,CAAlB;AAHkC;AAIrC;;;;WACD,kBAASE,KAAT,EAAgB;AACZ,mFAAmBA,KAAnB,GAA2B;AACvB,eAAO,IAAP;AACH;;AACD,UAAMC,KAAK,GAAG;AACVN,QAAAA,CAAC,EAAEK,KAAK,CAACL,CAAN,GAAU,KAAKG,UAAL,CAAgBI,KADnB;AAEVN,QAAAA,CAAC,EAAEI,KAAK,CAACJ;AAFC,OAAd;;AAIA,mFAAmBK,KAAnB,GAA2B;AACvB,eAAO,IAAP;AACH;;AACD,UAAME,KAAK,GAAG;AACVR,QAAAA,CAAC,EAAEK,KAAK,CAACL,CAAN,GAAU,KAAKG,UAAL,CAAgBI,KADnB;AAEVN,QAAAA,CAAC,EAAEI,KAAK,CAACJ,CAAN,GAAU,KAAKE,UAAL,CAAgBM;AAFnB,OAAd;;AAIA,mFAAmBD,KAAnB,GAA2B;AACvB,eAAO,IAAP;AACH;;AACD,UAAME,KAAK,GAAG;AACVV,QAAAA,CAAC,EAAEK,KAAK,CAACL,CADC;AAEVC,QAAAA,CAAC,EAAEI,KAAK,CAACJ,CAAN,GAAU,KAAKE,UAAL,CAAgBM;AAFnB,OAAd;AAIA,sFAAsBC,KAAtB;AACH;;;WACD,oBAAWC,KAAX,EAAkB;AACd,qFAAqBA,KAArB,GAA6B;AACzB,eAAO,IAAP;AACH;;AACD,UAAMC,IAAI,GAAGD,KAAb;AAAA,UAAoBE,MAAM,GAAGF,KAA7B;AAAA,UAAoCG,MAAM,GAAG;AACzCd,QAAAA,CAAC,EAAEW,KAAK,CAACI,QAAN,CAAef,CAAf,GAAmB,KAAKG,UAAL,CAAgBI,KADG;AAEzCN,QAAAA,CAAC,EAAEU,KAAK,CAACI,QAAN,CAAed,CAAf,GAAmB,KAAKE,UAAL,CAAgBM;AAFG,OAA7C;;AAIA,UAAII,MAAM,CAACX,MAAP,KAAkBc,SAAtB,EAAiC;AAC7B,YAAMC,YAAY,GAAG,IAAIpB,QAAQ,CAACqB,MAAb,CAAoBJ,MAAM,CAACd,CAA3B,EAA8Bc,MAAM,CAACb,CAArC,EAAwCY,MAAM,CAACX,MAAP,GAAgB,CAAxD,CAArB;AACA,0FAAwBe,YAAxB;AACH,OAHD,MAIK,IAAIL,IAAI,CAACO,IAAL,KAAcH,SAAlB,EAA6B;AAC9B,YAAMI,MAAM,GAAG,IAAIrB,WAAW,CAACsB,SAAhB,CAA0BP,MAAM,CAACd,CAAjC,EAAoCc,MAAM,CAACb,CAA3C,EAA8CW,IAAI,CAACO,IAAL,CAAUZ,KAAV,GAAkB,CAAhE,EAAmEK,IAAI,CAACO,IAAL,CAAUV,MAAV,GAAmB,CAAtF,CAAf;AACA,0FAAwBW,MAAxB;AACH;;AACD,aAAO,KAAP;AACH;;;;EA/CoBvB,QAAQ,CAACqB,M;;AAiDlCxB,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircleWarp = void 0;\nconst Circle_1 = require(\"./Circle\");\nconst Rectangle_1 = require(\"./Rectangle\");\nclass CircleWarp extends Circle_1.Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = Object.assign({}, canvasSize);\n    }\n    contains(point) {\n        if (super.contains(point)) {\n            return true;\n        }\n        const posNE = {\n            x: point.x - this.canvasSize.width,\n            y: point.y,\n        };\n        if (super.contains(posNE)) {\n            return true;\n        }\n        const posSE = {\n            x: point.x - this.canvasSize.width,\n            y: point.y - this.canvasSize.height,\n        };\n        if (super.contains(posSE)) {\n            return true;\n        }\n        const posSW = {\n            x: point.x,\n            y: point.y - this.canvasSize.height,\n        };\n        return super.contains(posSW);\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle_1.Circle(newPos.x, newPos.y, circle.radius * 2);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle_1.Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\nexports.CircleWarp = CircleWarp;\n"]},"metadata":{},"sourceType":"script"}